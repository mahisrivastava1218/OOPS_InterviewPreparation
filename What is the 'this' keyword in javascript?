The this keyword in JavaScript is a special reference that points to the object that is currently executing the code.
Its value changes depending on how and where the function is called — not where it’s written.

1️⃣ In an object method
this refers to the object before the dot.
const person = {
  name: "Mahi",
  greet: function () {
    console.log(this.name); // 'this' refers to person object
  }
};

person.greet(); // Mahi
2️⃣ Alone (in global scope)
In non-strict mode, this refers to the global object (window in browsers).

In strict mode, this is undefined.
console.log(this); // window (browser)
"use strict";
console.log(this); // undefined
3️⃣ In a function
Non-strict mode → this is the global object.

Strict mode → this is undefined.

function show() {
  console.log(this);
}
show(); // window (non-strict) or undefined (strict)
4️⃣ In a constructor function or class
When used inside a constructor or class, this refers to the newly created object.

function Car(brand) {
  this.brand = brand;
}
const car1 = new Car("BMW"); 
console.log(car1.brand); // BMW
5️⃣ In an event listener
this refers to the HTML element that triggered the event.

document.querySelector("button").addEventListener("click", function() {
  console.log(this); // the button element
});
6️⃣ Arrow functions and this
Arrow functions do not have their own this.
They inherit this from the surrounding scope.

const obj = {
  name: "Mahi",
  greet: () => {
    console.log(this.name); // undefined (inherits from global scope)
  }
};
obj.greet();
💡 In short:
this = Who is calling me right now?

In an object method → the object.

In a class/constructor → the new object being created.

Alone or in a function → global object (or undefined in strict mode).

Arrow function → parent's this.

